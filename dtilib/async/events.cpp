/*
Copyright (c) 2005 by the Danish Technological Institute.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
#include <dti/async.h>
#ifdef _WIN32
#	include <windows.h>
#endif
#ifdef __GNUC__
#	include <pthread.h>
#	include <sys/time.h>
#endif

#include "events.h"


namespace dti {
namespace async {
namespace detail {


//********************************  EVENT  ***********************************
// Emulation of Windows' event mechanism
//****************************************************************************

#ifdef __GNUC__
pthread_mutex_t mut = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
#endif

#ifdef _WIN32
event create_event(bool initval)
{
	return CreateEvent(0, true, initval, 0);
}
#endif

#ifdef __GNUC__
event create_event(bool initval)
{
	bool *p = new bool;
	*p = initval;
	return p;
}
#endif


#ifdef _WIN32
void delete_event(event ev)
{
	CloseHandle(ev);
}
#endif

#ifdef __GNUC__
void delete_event(event ev)
{
	delete ev;
}
#endif


#ifdef _WIN32
void set_event(event ev)
{
	SetEvent(ev);
}
#endif

#ifdef __GNUC__
void set_event(event ev)
{
	pthread_mutex_lock(&mut);
	*ev = true;
	pthread_cond_signal(&cond);
	pthread_mutex_unlock(&mut);
}
#endif



#ifdef _WIN32
void reset_event(event ev)
{
	ResetEvent(ev);
}
#endif

#ifdef __GNUC__
void reset_event(event ev)
{
	pthread_mutex_lock(&mut);
	*ev = false;
	pthread_cond_signal(&cond);
	pthread_mutex_unlock(&mut);
}
#endif



#ifdef _WIN32
int wait_for_multiple_events(int count, event events[], bool all, long msec)
{
	DWORD retval = 
		WaitForMultipleObjects(count, events, all, msec==-1 ? INFINITE : msec);

	if (retval==WAIT_TIMEOUT)
		return -1;
	else
		return retval - WAIT_OBJECT_0;
}
#endif

#ifdef __GNUC__
int wait_for_multiple_events(int count, event events[], bool all, long msec)
{
	pthread_mutex_lock(&mut);
	for (int i=0; i<count; i++)
		if (*events[i]) {
			pthread_mutex_unlock(&mut);
			return i;
		}
	if (msec==0) {
		pthread_mutex_unlock(&mut);
		return -1;
	}

	if (msec==-1)
		pthread_cond_wait(&cond, &mut);
	else {
		struct timespec ts;
		struct timeval tv;

		gettimeofday(&tv,0);
		long usec = tv.tv_usec + msec*1000;
		ts.tv_sec = tv.tv_sec + usec/1000000;
		ts.tv_nsec = (usec%1000000)*1000;
		pthread_cond_timedwait(&cond, &mut, &ts);
	}

	for (int i=0; i<count; i++)
		if (*events[i]) {
			pthread_mutex_unlock(&mut);
			return i;
		}
	pthread_mutex_unlock(&mut);
	return -1;
}
#endif


//***************************  CRITICAL_SECTION  *****************************
// Emulation of Windows' critical section mechanism
//****************************************************************************


critical_section::critical_section()
{
#ifdef _WIN32
	handle = new CRITICAL_SECTION;
	InitializeCriticalSection((LPCRITICAL_SECTION)handle);
#endif
#ifdef __GNUC__
	handle = new pthread_mutex_t;
	pthread_mutex_init((pthread_mutex_t*)handle, 0);
#endif
}
	


critical_section::~critical_section()
{
#ifdef _WIN32
	DeleteCriticalSection((LPCRITICAL_SECTION)handle);
	delete (LPCRITICAL_SECTION)handle;
#endif
#ifdef __GNUC__
	pthread_mutex_destroy((pthread_mutex_t*)handle);
	delete (pthread_mutex_t*)handle;
#endif
}


void critical_section::enter()
{
#ifdef _WIN32
	EnterCriticalSection((LPCRITICAL_SECTION)handle);
#endif
#ifdef __GNUC__
	if (pthread_mutex_lock((pthread_mutex_t*)handle))
		throw std::runtime_error("Cannot lock mutex");
#endif
}

void critical_section::leave()
{
#ifdef _WIN32
	LeaveCriticalSection((LPCRITICAL_SECTION)handle);
#endif
#ifdef __GNUC__
	if (pthread_mutex_unlock((pthread_mutex_t*)handle))
		throw std::runtime_error("Cannot unlock mutex");
#endif
}


}
}
}
